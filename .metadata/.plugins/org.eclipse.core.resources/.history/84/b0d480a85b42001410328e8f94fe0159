package br.com.ucb.dao;

import java.sql.Connection;
import java.sql.PreparedStatement;
import java.sql.ResultSet;
import java.util.ArrayList;

import br.com.ucb.factory.ConnectionFactory;
import br.com.ucb.modelo.Atividade;
import br.com.ucb.modelo.Usuario;

public class AtividadeDao extends ConnectionFactory {

	private static AtividadeDao instancia = null;

	/**
	 * Método responsável por criar uma estancia da classe seguindo o padrão
	 * singleton
	 * 
	 * @return AtividadeDao
	 */
	public static AtividadeDao getInstancia() {
		if (instancia == null) {
			instancia = new AtividadeDao();
		}
		return instancia;
	}

	/**
	 * Método responsável por inserir um Atividade no banco de dados
	 * 
	 * @param Usuario
	 * @param Atividade
	 * @return boolean
	 */
	public boolean inserir(Usuario user, Atividade ativ) {

		Connection conn = null;
		PreparedStatement ps = null;

		/*
		 * id int not null auto_increment, 
		 * uid int not null, 
		 * nome varchar(100)not null, 
		 * tempo_estimado float not null, 
		 * predicao varchar(30),
		 * estrategia varchar(200), 
		 * recursos varchar(200), 
		 * grau_atencao varchar(10), 
		 * comprensao varchar(200), 
		 * objetivo varchar(200),
		 * anotacoes varchar(200), 
		 * kma float, 
		 * tempo_gasto float, 
		 * kmb float,
		 */

		String sql = "insert into atividade(uid,nome,tempo_estimado,predicao,estrategia,recursos,grau_atencao,comprensao,objetivo,kma) "
				+ "values (?,?,?,?,?,?,?,?,?,?)";
		try {
			conn = criarConexao();
			ps = conn.prepareStatement(sql);

			ps.setInt   (1,  user.getId());
			ps.setString(2,  ativ.getNome());
			ps.setFloat (3,  ativ.getTempoEstimado());
			ps.setString(4,  ativ.getPredicao());
			ps.setString(5,  ativ.getEstrategia());
			ps.setString(6,  ativ.getRecursos());
			ps.setString(7,  ativ.getGrauAtencao());
			ps.setString(8,  ativ.getComprensao());
			ps.setString(9,  ativ.getObjetivo());
			ps.setFloat (10, ativ.getKma());

			return ps.execute();

		} catch (Exception e) {
			System.out.println("Erro ao inserir atividade: " + e);
			e.printStackTrace();
			return false;
		} finally {
			fecharConexao(conn, ps, null);
		}
	}

	/**
	 * Método responsável por excluir um registro do banco de dados
	 * 
	 * @param Atividade
	 * @return boolean
	 */
	public boolean excluir(Atividade ativ) {
		Connection conn = null;
		PreparedStatement ps = null;

		String sql = "delete from atividade where id = ?";

		try {
			conn = criarConexao();
			ps = conn.prepareStatement(sql);

			ps.setInt(1, ativ.getId());

			return ps.execute();

		} catch (Exception e) {
			System.out.println("Erro ao excluir Atividade: " + e);
			e.printStackTrace();
			return false;
		} finally {
			fecharConexao(conn, ps, null);
		}
	}

	/**
	 * Método responsável por consultar um registro no banco de dados
	 * 
	 * @param Atividade
	 * @return Atividade
	 */
	public Atividade consultar(Atividade ativ) {
		Connection conn = null;
		PreparedStatement ps = null;
		ResultSet rs = null;

		String sql = "select * from atividade where id = ?";

		try {
			conn = criarConexao();
			ps = conn.prepareStatement(sql);

			ps.setInt(1, ativ.getId());

			rs = ps.executeQuery();

			if (rs.next()) {
				ativ.setId(rs.getInt("id"));
				ativ.setNome(rs.getString("nome"));
				ativ.setTempoEstimado(!Float.isNaN(rs
						.getFloat("tempo_estimado")) ? rs
						.getFloat("tempo_estimado") : 0); // se o resultado for
															// nulo coloca 0
				ativ.setTempoGasto(!Float.isNaN(rs.getFloat("tempo_gasto")) ? rs
						.getFloat("tempo_gasto") : 0); // se o resultado for
														// nulo coloca 0
				ativ.setKma(!Float.isNaN(rs.getFloat("kma")) ? rs
						.getFloat("kma") : 0);
				ativ.setKmb(!Float.isNaN(rs.getFloat("kmb")) ? rs
						.getFloat("kmb") : 0);

				return ativ;
			} else {
				return null;
			}
		} catch (Exception e) {
			System.out.println("Erro ao excluir Atividade: " + e);
			e.printStackTrace();
			return null;
		} finally {
			fecharConexao(conn, ps, rs);
		}
	}

	/**
	 * Método responsável por listar todos os Atividades do usuário
	 * 
	 * @param Usuario
	 * @return ArrayList<Atividade>
	 */
	public ArrayList<Atividade> listar(Usuario user) {
		Connection conn = null;
		PreparedStatement ps = null;
		ResultSet rs = null;
		ArrayList<Atividade> Atividades = null;

		String sql = "select * from atividade where uid = ?";

		try {
			conn = criarConexao();
			ps = conn.prepareStatement(sql);
			ps.setInt(1, user.getId());
			rs = ps.executeQuery();

			Atividades = new ArrayList<Atividade>();

			while (rs.next()) {
				Atividade ativ = new Atividade();
				ativ.setId(rs.getInt("id"));
				ativ.setNome(rs.getString("nome"));
				ativ.setTempoEstimado(!Float.isNaN(rs
						.getFloat("tempo_estimado")) ? rs
						.getFloat("tempo_estimado") : 0); // se o resultado for
															// nulo coloca 0
				ativ.setTempoGasto(!Float.isNaN(rs.getFloat("tempo_gasto")) ? rs
						.getFloat("tempo_gasto") : 0); // se o resultado for
														// nulo coloca 0
				ativ.setKma(!Float.isNaN(rs.getFloat("kma")) ? rs
						.getFloat("kma") : 0);
				ativ.setKmb(!Float.isNaN(rs.getFloat("kmb")) ? rs
						.getFloat("kmb") : 0);

				Atividades.add(ativ);
			}

			return Atividades;

		} catch (Exception e) {
			System.out.println("Erro ao excluir Atividade: " + e);
			e.printStackTrace();
			return Atividades;
		} finally {
			fecharConexao(conn, ps, rs);
		}
	}

	/**
	 * Método responsável por atualizar um Atividade
	 * 
	 * @param Usuario
	 * @param Atividade
	 * @return boolean
	 */
	public boolean atualizar(Usuario user, Atividade ativ) {

		Connection conn = null;
		PreparedStatement ps = null;

		String sql = "update Atividade set "
				+ "nome = ?, tempo_estimado = ?, tempo_gasto = ?, kma = ?, kmb = ? "
				+ "where id = ?";
		try {
			conn = criarConexao();
			ps = conn.prepareStatement(sql);

			ps.setString(1, ativ.getNome());
			ps.setFloat(2, ativ.getTempoEstimado());
			ps.setFloat(3, ativ.getTempoGasto());
			ps.setFloat(4, ativ.getKma());
			ps.setFloat(5, ativ.getKma());
			ps.setInt(6, user.getId());

			return ps.executeUpdate() > 0 ? true : false;

		} catch (Exception e) {
			System.out.println("Erro ao inserir Atividade: " + e);
			e.printStackTrace();
			return false;
		} finally {
			fecharConexao(conn, ps, null);
		}
	}
}
