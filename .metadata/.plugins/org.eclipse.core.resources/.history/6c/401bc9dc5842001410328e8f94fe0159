package br.com.ucb.dao;

import java.sql.Connection;
import java.sql.PreparedStatement;
import java.sql.ResultSet;
import java.util.ArrayList;

import br.com.ucb.factory.ConnectionFactory;
import br.com.ucb.modelo.Atividade;
import br.com.ucb.modelo.Usuario;

public class AtividadeDao extends ConnectionFactory{

	private static AtividadeDao instancia = null;
	
	/**
	 * Método responsável por criar uma estancia da classe seguindo o padrão singleton
	 * @return AtividadeDao
	 */
	public static AtividadeDao getInstancia(){
		if (instancia == null){
			instancia = new AtividadeDao();
		}
		return instancia;
	}
	
	/**
	 * Método responsável por inserir um Atividade no banco de dados
	 * @param Usuario
	 * @param Atividade
	 * @return boolean
	 */
	public boolean inserir (Usuario user, Atividade proj){
		
		Connection        conn = null;
		PreparedStatement ps   = null;
		
		String sql = "insert into Atividade(uid,nome,tempo_estimado,kma) "+
					 "values (?,?,?,?,?,?)";
		try{
			conn = criarConexao();
			ps = conn.prepareStatement(sql);
			
			ps.setInt   (1, user.getId           ());
			ps.setString(2, proj.getNome         ());
			ps.setFloat (3, proj.getTempoEstimado());
			ps.setFloat (4, proj.getKma          ());
			
			return ps.execute();
			
		}catch(Exception e){
			System.out.println("Erro ao inserir Atividade: "+e);
			e.printStackTrace();
			return false;
		}finally{
			fecharConexao(conn, ps, null);
		}
	}
	
	/**
	 * Método responsável por excluir um registro do banco de dados
	 * @param Atividade
	 * @return boolean
	 */
	public boolean excluir (Atividade proj){
		Connection        conn = null;
		PreparedStatement ps   = null;
		
		String sql = "delete from Atividade where id = ?";
		
		try{
			conn = criarConexao();
			ps = conn.prepareStatement(sql);
			
			ps.setInt(1, proj.getId());
			
			return ps.execute();
			
		}catch(Exception e){
			System.out.println("Erro ao excluir Atividade: "+e);
			e.printStackTrace();
			return false;
		}finally{
			fecharConexao(conn, ps, null);
		}
	}
	
	/**
	 * Método responsável por consultar um registro no banco de dados
	 * @param Atividade
	 * @return Atividade
	 */
	public Atividade consultar(Atividade proj){
		Connection        conn = null;
		PreparedStatement ps   = null;
		ResultSet 		  rs   = null;
		
		String sql = "select * from Atividade where id = ?";
		
		try{
			conn = criarConexao();
			ps = conn.prepareStatement(sql);
			
			ps.setInt(1, proj.getId());
			
			rs = ps.executeQuery();
			
			if(rs.next()){
				proj.setId           (rs.getInt   ("id"));
				proj.setNome         (rs.getString("nome"));
				proj.setTempoEstimado(!Float.isNaN(rs.getFloat("tempo_estimado"))? rs.getFloat("tempo_estimado") : 0); // se o resultado for nulo coloca 0
				proj.setTempoGasto   (!Float.isNaN(rs.getFloat("tempo_gasto"   ))? rs.getFloat("tempo_gasto")    : 0); // se o resultado for nulo coloca 0
				proj.setKma          (!Float.isNaN(rs.getFloat("kma"))? rs.getFloat("kma") : 0);
				proj.setKmb          (!Float.isNaN(rs.getFloat("kmb"))? rs.getFloat("kmb") : 0);
				
				return proj;
			}else{
				return null;
			}
		}catch(Exception e){
			System.out.println("Erro ao excluir Atividade: "+e);
			e.printStackTrace();
			return null;
		}finally{
			fecharConexao(conn, ps, rs);
		}
	}

	/**
	 * Método responsável por listar todos os Atividades do usuário
	 * @param Usuario
	 * @return ArrayList<Atividade>
	 */
	public ArrayList<Atividade> listar(Usuario user){
		Connection 		   conn 	= null;
		PreparedStatement  ps 		= null;
		ResultSet 		   rs 		= null;
		ArrayList<Atividade> Atividades = null;
		
		String sql = "select * from Atividade where uid = ?";
		
		try{
			conn = criarConexao();
			ps = conn.prepareStatement(sql);	
			ps.setInt(1, user.getId());
			rs = ps.executeQuery();
			
			Atividades = new ArrayList<Atividade>();
			
			while(rs.next()){
				Atividade proj = new Atividade();
				proj.setId           (rs.getInt   ("id"));
				proj.setNome         (rs.getString("nome"));
				proj.setTempoEstimado(!Float.isNaN(rs.getFloat("tempo_estimado"))? rs.getFloat("tempo_estimado") : 0); // se o resultado for nulo coloca 0
				proj.setTempoGasto   (!Float.isNaN(rs.getFloat("tempo_gasto"   ))? rs.getFloat("tempo_gasto")    : 0); // se o resultado for nulo coloca 0
				proj.setKma          (!Float.isNaN(rs.getFloat("kma"))? rs.getFloat("kma") : 0);
				proj.setKmb          (!Float.isNaN(rs.getFloat("kmb"))? rs.getFloat("kmb") : 0);
				
				Atividades.add(proj);
			}
			
			return Atividades;
			
		}catch(Exception e){
			System.out.println("Erro ao excluir Atividade: "+e);
			e.printStackTrace();
			return Atividades;
		}finally{
			fecharConexao(conn, ps, rs);
		}
	}
	
	/**
	 * Método responsável por atualizar um Atividade
	 * @param Usuario
	 * @param Atividade
	 * @return boolean
	 */
	public boolean atualizar (Usuario user, Atividade proj){
		
		Connection        conn = null;
		PreparedStatement ps   = null;
		
		String sql = "update Atividade set "+
				     "nome = ?, tempo_estimado = ?, tempo_gasto = ?, kma = ?, kmb = ? "+
					 "where id = ?";
		try{
			conn = criarConexao();
			ps = conn.prepareStatement(sql);
			
			ps.setString(1, proj.getNome         ());
			ps.setFloat (2, proj.getTempoEstimado());
			ps.setFloat (3, proj.getTempoGasto   ());
			ps.setFloat (4, proj.getKma          ());
			ps.setFloat (5, proj.getKma          ());
			ps.setInt   (6, user.getId           ());
			
			return ps.executeUpdate() > 0 ? true : false;
			
		}catch(Exception e){
			System.out.println("Erro ao inserir Atividade: "+e);
			e.printStackTrace();
			return false;
		}finally{
			fecharConexao(conn, ps, null);
		}
	}	
}




